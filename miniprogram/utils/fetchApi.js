"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const defaultAuth = "opV_P5";
const api_1 = require("../configs/api");
class ApiFetch {
    constructor(params) {
        this.withBaseURL = params.withBaseURL || false;
        this.baseURL = params.baseURL;
        this.header = params.header;
    }
    fetch(method, url, data, noTokenRequired, showLoading) {
        const _this = this;
        if (!noTokenRequired) {
            const loginData = wx.getStorageSync("loginData");
            const authToken = loginData ? loginData["unionId"] : wx.getStorageSync("unionId");
            _this.header.Authorization = authToken || _this.header.Authorization;
        }
        return new Promise((resolve, reject) => {
            wx.request({
                header: _this.header,
                data: data,
                url: _this.withBaseURL ? _this.baseURL + url : url,
                method: method || "GET",
                success(res) {
                    handleRes(res, resolve, reject);
                },
                fail(e) {
                    wx.showToast({
                        title: `接口调用失败:${e.errMsg}`,
                        icon: "none"
                    });
                },
                complete() {
                    showLoading ? wx.hideLoading() : null;
                }
            });
        });
    }
}
exports.ApiFetch = ApiFetch;
const handleRes = (res, resolve, reject) => {
    const statusCode = res.statusCode;
    const resData = res.data;
    if (statusCode >= 200 && statusCode < 300) {
        if (!judgeErrCode(resData.errCode, reject)) {
            resolve(resData);
        }
    } else {
        judgeStatusCode(res.statusCode, reject);
    }
};
const judgeErrCode = (errCode, reject) => {
    let hint;
    switch (errCode) {
        case 0:
            break;
        default:
            hint = "未知错误！";
    }
    if (hint) {
        wx.showToast({
            title: hint,
            icon: "none"
        });
        reject();
    }
    return hint;
};
const judgeStatusCode = (statusCode, reject) => {
    let hint;
    switch (statusCode) {
        case 404:
            hint = "服务器正在升级...";
            break;
        default:
            hint = `服务器正在维护中，请稍后再试！ 状态码：${statusCode}`;
    }
    if (hint) {
        wx.showToast({
            title: hint,
            icon: "none"
        });
        reject();
    }
};
const fetchApi = new ApiFetch({
    baseURL: api_1.BaseUrl,
    withBaseURL: true,
    header: {
        "content-type": "application/json",
        Authorization: defaultAuth
    }
});
exports.fetchApi = fetchApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2hBcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmZXRjaEFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQztBQUM3Qix3Q0FBeUM7QUFFekMsTUFBTSxRQUFRO0lBS1osWUFBWSxNQUFpQjtRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDOUIsQ0FBQztJQUVELEtBQUssQ0FDSCxNQVNhLEVBQ2IsR0FBVyxFQUNYLElBQWEsRUFDYixlQUF5QixFQUN6QixXQUFxQjtRQUVyQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNwQixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sU0FBUyxHQUFHLFNBQVM7Z0JBQ3pCLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO2dCQUN0QixDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNqQyxLQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7U0FDdEU7UUFFRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBWSxFQUFFLE1BQVcsRUFBRSxFQUFFO1lBQy9DLEVBQUUsQ0FBQyxPQUFPLENBQUM7Z0JBQ1QsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO2dCQUNwQixJQUFJLEVBQUUsSUFBSTtnQkFDVixHQUFHLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUc7Z0JBQ2xELE1BQU0sRUFBRSxNQUFNLElBQUksS0FBSztnQkFDdkIsT0FBTyxDQUFDLEdBQWlCO29CQUN2QixTQUFTLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDbEMsQ0FBQztnQkFDRCxJQUFJLENBQUMsQ0FBQztvQkFDSixFQUFFLENBQUMsU0FBUyxDQUFDO3dCQUNYLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxNQUFNLEVBQUU7d0JBQzNCLElBQUksRUFBRSxNQUFNO3FCQUNiLENBQUMsQ0FBQztnQkFDTCxDQUFDO2dCQUNELFFBQVE7b0JBQ04sV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDeEMsQ0FBQzthQUNGLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBMkRRLDRCQUFRO0FBekRqQixNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQWlCLEVBQUUsT0FBWSxFQUFFLE1BQVcsRUFBRSxFQUFFO0lBQ2pFLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUM7SUFDbEMsTUFBTSxPQUFPLEdBQWUsR0FBRyxDQUFDLElBQUksQ0FBQztJQUNyQyxJQUFJLFVBQVUsSUFBSSxHQUFHLElBQUksVUFBVSxHQUFHLEdBQUcsRUFBRTtRQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDMUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2xCO0tBQ0Y7U0FBTTtRQUNMLGVBQWUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3pDO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxPQUFlLEVBQUUsTUFBVyxFQUFFLEVBQUU7SUFDcEQsSUFBSSxJQUFJLENBQUM7SUFDVCxRQUFRLE9BQU8sRUFBRTtRQUNmLEtBQUssQ0FBQztZQUNKLE1BQU07UUFDUjtZQUNFLElBQUksR0FBRyxPQUFPLENBQUM7S0FDbEI7SUFDRCxJQUFJLElBQUksRUFBRTtRQUNSLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDWCxLQUFLLEVBQUUsSUFBSTtZQUNYLElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxFQUFFLENBQUM7S0FDVjtJQUNELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQyxDQUFBO0FBRUQsTUFBTSxlQUFlLEdBQUcsQ0FBQyxVQUFrQixFQUFFLE1BQVcsRUFBRSxFQUFFO0lBQzFELElBQUksSUFBSSxDQUFDO0lBQ1QsUUFBUSxVQUFVLEVBQUU7UUFDbEIsS0FBSyxHQUFHO1lBQ04sSUFBSSxHQUFHLFlBQVksQ0FBQztZQUNwQixNQUFNO1FBQ1I7WUFDRSxJQUFJLEdBQUcsdUJBQXVCLFVBQVUsRUFBRSxDQUFDO0tBQzlDO0lBQ0QsSUFBSSxJQUFJLEVBQUU7UUFDUixFQUFFLENBQUMsU0FBUyxDQUFDO1lBQ1gsS0FBSyxFQUFFLElBQUk7WUFDWCxJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUMsQ0FBQztRQUNILE1BQU0sRUFBRSxDQUFDO0tBQ1Y7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQztJQUM1QixPQUFPLEVBQUUsYUFBTztJQUNoQixXQUFXLEVBQUUsSUFBSTtJQUNqQixNQUFNLEVBQUU7UUFDTixjQUFjLEVBQUUsa0JBQWtCO1FBQ2xDLGFBQWEsRUFBRSxXQUFXO0tBQzNCO0NBQ0YsQ0FBQyxDQUFDO0FBRWdCLDRCQUFRIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdEF1dGggPSBcIm9wVl9QNVwiO1xyXG5pbXBvcnQgeyBCYXNlVXJsIH0gZnJvbSBcIi4uL2NvbmZpZ3MvYXBpXCI7XHJcbmltcG9ydCB7IGh0dHBIZWFkZXIsIEFwaVBhcmFtcywgaHR0cFJlc3BvbnNlLCByZXN1bHREYXRhIH0gZnJvbSBcIi4uL21vZGVscy9odHRwXCI7XHJcbmNsYXNzIEFwaUZldGNoIHtcclxuICB3aXRoQmFzZVVSTDogYm9vbGVhbjtcclxuICBiYXNlVVJMOiBzdHJpbmc7XHJcbiAgaGVhZGVyOiBodHRwSGVhZGVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IEFwaVBhcmFtcykge1xyXG4gICAgdGhpcy53aXRoQmFzZVVSTCA9IHBhcmFtcy53aXRoQmFzZVVSTCB8fCBmYWxzZTtcclxuICAgIHRoaXMuYmFzZVVSTCA9IHBhcmFtcy5iYXNlVVJMO1xyXG4gICAgdGhpcy5oZWFkZXIgPSBwYXJhbXMuaGVhZGVyO1xyXG4gIH1cclxuXHJcbiAgZmV0Y2goXHJcbiAgICBtZXRob2Q6XHJcbiAgICAgIHwgXCJHRVRcIlxyXG4gICAgICB8IFwiT1BUSU9OU1wiXHJcbiAgICAgIHwgXCJIRUFEXCJcclxuICAgICAgfCBcIlBPU1RcIlxyXG4gICAgICB8IFwiUFVUXCJcclxuICAgICAgfCBcIkRFTEVURVwiXHJcbiAgICAgIHwgXCJUUkFDRVwiXHJcbiAgICAgIHwgXCJDT05ORUNUXCJcclxuICAgICAgfCB1bmRlZmluZWQsXHJcbiAgICB1cmw6IHN0cmluZyxcclxuICAgIGRhdGE/OiBvYmplY3QsXHJcbiAgICBub1Rva2VuUmVxdWlyZWQ/OiBib29sZWFuLFxyXG4gICAgc2hvd0xvYWRpbmc/OiBib29sZWFuXHJcbiAgKSB7XHJcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XHJcbiAgICBpZiAoIW5vVG9rZW5SZXF1aXJlZCkge1xyXG4gICAgICBjb25zdCBsb2dpbkRhdGEgPSB3eC5nZXRTdG9yYWdlU3luYyhcImxvZ2luRGF0YVwiKTtcclxuICAgICAgY29uc3QgYXV0aFRva2VuID0gbG9naW5EYXRhXHJcbiAgICAgICAgPyBsb2dpbkRhdGFbXCJ1bmlvbklkXCJdXHJcbiAgICAgICAgOiB3eC5nZXRTdG9yYWdlU3luYyhcInVuaW9uSWRcIik7XHJcbiAgICAgIF90aGlzLmhlYWRlci5BdXRob3JpemF0aW9uID0gYXV0aFRva2VuIHx8IF90aGlzLmhlYWRlci5BdXRob3JpemF0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT4ge1xyXG4gICAgICB3eC5yZXF1ZXN0KHtcclxuICAgICAgICBoZWFkZXI6IF90aGlzLmhlYWRlcixcclxuICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgIHVybDogX3RoaXMud2l0aEJhc2VVUkwgPyBfdGhpcy5iYXNlVVJMICsgdXJsIDogdXJsLFxyXG4gICAgICAgIG1ldGhvZDogbWV0aG9kIHx8IFwiR0VUXCIsXHJcbiAgICAgICAgc3VjY2VzcyhyZXM6IGh0dHBSZXNwb25zZSkge1xyXG4gICAgICAgICAgaGFuZGxlUmVzKHJlcywgcmVzb2x2ZSwgcmVqZWN0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZhaWwoZSkge1xyXG4gICAgICAgICAgd3guc2hvd1RvYXN0KHtcclxuICAgICAgICAgICAgdGl0bGU6IGDmjqXlj6PosIPnlKjlpLHotKU6JHtlLmVyck1zZ31gLFxyXG4gICAgICAgICAgICBpY29uOiBcIm5vbmVcIlxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wbGV0ZSgpIHtcclxuICAgICAgICAgIHNob3dMb2FkaW5nID8gd3guaGlkZUxvYWRpbmcoKSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgaGFuZGxlUmVzID0gKHJlczogaHR0cFJlc3BvbnNlLCByZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PiB7XHJcbiAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlcy5zdGF0dXNDb2RlO1xyXG4gIGNvbnN0IHJlc0RhdGEgPSA8cmVzdWx0RGF0YT5yZXMuZGF0YTtcclxuICBpZiAoc3RhdHVzQ29kZSA+PSAyMDAgJiYgc3RhdHVzQ29kZSA8IDMwMCkge1xyXG4gICAgaWYgKCFqdWRnZUVyckNvZGUocmVzRGF0YS5lcnJDb2RlLCByZWplY3QpKSB7XHJcbiAgICAgIHJlc29sdmUocmVzRGF0YSk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGp1ZGdlU3RhdHVzQ29kZShyZXMuc3RhdHVzQ29kZSwgcmVqZWN0KTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGp1ZGdlRXJyQ29kZSA9IChlcnJDb2RlOiBudW1iZXIsIHJlamVjdDogYW55KSA9PiB7XHJcbiAgbGV0IGhpbnQ7XHJcbiAgc3dpdGNoIChlcnJDb2RlKSB7XHJcbiAgICBjYXNlIDA6XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgaGludCA9IFwi5pyq55+l6ZSZ6K+v77yBXCI7XHJcbiAgfVxyXG4gIGlmIChoaW50KSB7XHJcbiAgICB3eC5zaG93VG9hc3Qoe1xyXG4gICAgICB0aXRsZTogaGludCxcclxuICAgICAgaWNvbjogXCJub25lXCJcclxuICAgIH0pO1xyXG4gICAgcmVqZWN0KCk7XHJcbiAgfVxyXG4gIHJldHVybiBoaW50XHJcbn1cclxuXHJcbmNvbnN0IGp1ZGdlU3RhdHVzQ29kZSA9IChzdGF0dXNDb2RlOiBudW1iZXIsIHJlamVjdDogYW55KSA9PiB7XHJcbiAgbGV0IGhpbnQ7XHJcbiAgc3dpdGNoIChzdGF0dXNDb2RlKSB7XHJcbiAgICBjYXNlIDQwNDpcclxuICAgICAgaGludCA9IFwi5pyN5Yqh5Zmo5q2j5Zyo5Y2H57qnLi4uXCI7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgaGludCA9IGDmnI3liqHlmajmraPlnKjnu7TmiqTkuK3vvIzor7fnqI3lkI7lho3or5XvvIEg54q25oCB56CB77yaJHtzdGF0dXNDb2RlfWA7XHJcbiAgfVxyXG4gIGlmIChoaW50KSB7XHJcbiAgICB3eC5zaG93VG9hc3Qoe1xyXG4gICAgICB0aXRsZTogaGludCxcclxuICAgICAgaWNvbjogXCJub25lXCJcclxuICAgIH0pO1xyXG4gICAgcmVqZWN0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBmZXRjaEFwaSA9IG5ldyBBcGlGZXRjaCh7XHJcbiAgYmFzZVVSTDogQmFzZVVybCxcclxuICB3aXRoQmFzZVVSTDogdHJ1ZSxcclxuICBoZWFkZXI6IHtcclxuICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgQXV0aG9yaXphdGlvbjogZGVmYXVsdEF1dGhcclxuICB9XHJcbn0pO1xyXG5cclxuZXhwb3J0IHsgQXBpRmV0Y2gsIGZldGNoQXBpIH07XHJcbiJdfQ==
