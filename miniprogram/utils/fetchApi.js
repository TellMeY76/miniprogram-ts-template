"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const defaultAuth = "opV_P5";
const api_1 = require("../configs/api");
class ApiFetch {
    constructor(params) {
        this.withBaseURL = params.withBaseURL || false;
        this.baseURL = params.baseURL;
        this.header = params.header;
    }
    fetch(method, url, data, noTokenRequired, showLoading) {
        const _this = this;
        if (!noTokenRequired) {
            const loginData = wx.getStorageSync("loginData");
            const authToken = loginData
                ? loginData["unionId"]
                : wx.getStorageSync("unionId");
            _this.header.Authorization = authToken || _this.header.Authorization;
        }
        return new Promise((resolve, reject) => {
            wx.request({
                header: _this.header,
                data: data,
                url: _this.withBaseURL ? _this.baseURL + url : url,
                method: method || "GET",
                success(res) {
                    _this.handleRes(res, _this, resolve, reject);
                },
                fail(e) {
                    wx.showToast({
                        title: `接口调用失败:${e.errMsg}`,
                        icon: "none"
                    });
                },
                complete() {
                    showLoading ? wx.hideLoading() : null;
                }
            });
        });
    }
    handleRes(res, that, resolve, reject) {
        const statusCode = res.statusCode;
        const resData = res.data;
        if (statusCode >= 200 && statusCode < 300) {
            if (!that.judgeErrCode(resData.errCode, reject)) {
                resolve(resData);
            }
        }
        else {
            that.judgeStatusCode(res.statusCode, reject);
        }
    }
    judgeErrCode(errCode, reject) {
        let hint;
        switch (errCode) {
            case 0:
                break;
            default:
                hint = "未知错误！";
        }
        if (hint) {
            wx.showToast({
                title: hint,
                icon: "none"
            });
            reject();
        }
        return hint;
    }
    judgeStatusCode(statusCode, reject) {
        let hint;
        switch (statusCode) {
            case 404:
                hint = "服务器正在升级...";
                break;
            default:
                hint = `服务器正在维护中，请稍后再试！ 状态码：${statusCode}`;
        }
        if (hint) {
            wx.showToast({
                title: hint,
                icon: "none"
            });
            reject();
        }
    }
}
const fetchApi = new ApiFetch({
    baseURL: api_1.apiConfig.baseUrl,
    withBaseURL: true,
    header: {
        "content-type": "application/json",
        Authorization: defaultAuth
    }
});
exports.fetchApi = fetchApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2hBcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmZXRjaEFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQztBQUM3Qix3Q0FBMkM7QUFzQjNDLE1BQU0sUUFBUTtJQUtaLFlBQVksTUFBaUI7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzlCLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFTYSxFQUNiLEdBQVcsRUFDWCxJQUFhLEVBQ2IsZUFBeUIsRUFDekIsV0FBcUI7UUFFckIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDcEIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNqRCxNQUFNLFNBQVMsR0FBRyxTQUFTO2dCQUN6QixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztnQkFDdEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDakMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsU0FBUyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1NBQ3RFO1FBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQVksRUFBRSxNQUFXLEVBQUUsRUFBRTtZQUMvQyxFQUFFLENBQUMsT0FBTyxDQUFDO2dCQUNULE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtnQkFDcEIsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsR0FBRyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHO2dCQUNsRCxNQUFNLEVBQUUsTUFBTSxJQUFJLEtBQUs7Z0JBQ3ZCLE9BQU8sQ0FBQyxHQUFpQjtvQkFDdkIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDL0MsQ0FBQztnQkFDRCxJQUFJLENBQUMsQ0FBQztvQkFDSixFQUFFLENBQUMsU0FBUyxDQUFDO3dCQUNYLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxNQUFNLEVBQUU7d0JBQzNCLElBQUksRUFBRSxNQUFNO3FCQUNiLENBQUMsQ0FBQztnQkFDTCxDQUFDO2dCQUNELFFBQVE7b0JBQ04sV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDeEMsQ0FBQzthQUNGLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFpQixFQUFFLElBQVMsRUFBRSxPQUFZLEVBQUUsTUFBVztRQUMvRCxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDbEMsSUFBSSxVQUFVLElBQUksR0FBRyxJQUFJLFVBQVUsR0FBRyxHQUFHLEVBQUU7WUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRTtnQkFDL0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2xCO1NBQ0Y7YUFBTTtZQUNMLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUM5QztJQUNILENBQUM7SUFFRCxZQUFZLENBQUMsT0FBZSxFQUFFLE1BQVc7UUFDdkMsSUFBSSxJQUFJLENBQUM7UUFDVCxRQUFRLE9BQU8sRUFBRTtZQUNmLEtBQUssQ0FBQztnQkFDSixNQUFNO1lBQ1I7Z0JBQ0UsSUFBSSxHQUFHLE9BQU8sQ0FBQztTQUNsQjtRQUNELElBQUksSUFBSSxFQUFFO1lBQ1IsRUFBRSxDQUFDLFNBQVMsQ0FBQztnQkFDWCxLQUFLLEVBQUUsSUFBSTtnQkFDWCxJQUFJLEVBQUUsTUFBTTthQUNiLENBQUMsQ0FBQztZQUNILE1BQU0sRUFBRSxDQUFDO1NBQ1Y7UUFDRCxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCxlQUFlLENBQUMsVUFBa0IsRUFBRSxNQUFXO1FBQzdDLElBQUksSUFBSSxDQUFDO1FBQ1QsUUFBUSxVQUFVLEVBQUU7WUFDbEIsS0FBSyxHQUFHO2dCQUNOLElBQUksR0FBRyxZQUFZLENBQUM7Z0JBQ3BCLE1BQU07WUFDUjtnQkFDRSxJQUFJLEdBQUcsdUJBQXVCLFVBQVUsRUFBRSxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxJQUFJLEVBQUU7WUFDUixFQUFFLENBQUMsU0FBUyxDQUFDO2dCQUNYLEtBQUssRUFBRSxJQUFJO2dCQUNYLElBQUksRUFBRSxNQUFNO2FBQ2IsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxFQUFFLENBQUM7U0FDVjtJQUNILENBQUM7Q0FDRjtBQUVELE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDO0lBQzVCLE9BQU8sRUFBRSxlQUFTLENBQUMsT0FBTztJQUMxQixXQUFXLEVBQUUsSUFBSTtJQUNqQixNQUFNLEVBQUU7UUFDTixjQUFjLEVBQUUsa0JBQWtCO1FBQ2xDLGFBQWEsRUFBRSxXQUFXO0tBQzNCO0NBQ0YsQ0FBQyxDQUFDO0FBRU0sNEJBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWZhdWx0QXV0aCA9IFwib3BWX1A1XCI7XHJcbmltcG9ydCB7IGFwaUNvbmZpZyB9IGZyb20gXCIuLi9jb25maWdzL2FwaVwiO1xyXG5pbnRlcmZhY2UgQXBpUGFyYW1zIHtcclxuICBiYXNlVVJMOiBzdHJpbmc7XHJcbiAgaGVhZGVyOiBodHRwSGVhZGVyO1xyXG4gIHdpdGhCYXNlVVJMPzogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIGh0dHBIZWFkZXIge1xyXG4gIFwiY29udGVudC10eXBlXCI6IHN0cmluZztcclxuICBBdXRob3JpemF0aW9uOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBodHRwUmVzcG9uc2Uge1xyXG4gIGRhdGE6IGFueTtcclxuICBzdGF0dXNDb2RlOiBudW1iZXI7XHJcbn1cclxuXHJcbmludGVyZmFjZSByZXNEYXRhIHtcclxuICBkYXRhOiBhbnk7XHJcbiAgZXJyQ29kZTogbnVtYmVyO1xyXG59XHJcblxyXG5jbGFzcyBBcGlGZXRjaCB7XHJcbiAgd2l0aEJhc2VVUkw6IGJvb2xlYW47XHJcbiAgYmFzZVVSTDogc3RyaW5nO1xyXG4gIGhlYWRlcjogaHR0cEhlYWRlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocGFyYW1zOiBBcGlQYXJhbXMpIHtcclxuICAgIHRoaXMud2l0aEJhc2VVUkwgPSBwYXJhbXMud2l0aEJhc2VVUkwgfHwgZmFsc2U7XHJcbiAgICB0aGlzLmJhc2VVUkwgPSBwYXJhbXMuYmFzZVVSTDtcclxuICAgIHRoaXMuaGVhZGVyID0gcGFyYW1zLmhlYWRlcjtcclxuICB9XHJcblxyXG4gIGZldGNoKFxyXG4gICAgbWV0aG9kOlxyXG4gICAgICB8IFwiR0VUXCJcclxuICAgICAgfCBcIk9QVElPTlNcIlxyXG4gICAgICB8IFwiSEVBRFwiXHJcbiAgICAgIHwgXCJQT1NUXCJcclxuICAgICAgfCBcIlBVVFwiXHJcbiAgICAgIHwgXCJERUxFVEVcIlxyXG4gICAgICB8IFwiVFJBQ0VcIlxyXG4gICAgICB8IFwiQ09OTkVDVFwiXHJcbiAgICAgIHwgdW5kZWZpbmVkLFxyXG4gICAgdXJsOiBzdHJpbmcsXHJcbiAgICBkYXRhPzogb2JqZWN0LFxyXG4gICAgbm9Ub2tlblJlcXVpcmVkPzogYm9vbGVhbixcclxuICAgIHNob3dMb2FkaW5nPzogYm9vbGVhblxyXG4gICkge1xyXG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xyXG4gICAgaWYgKCFub1Rva2VuUmVxdWlyZWQpIHtcclxuICAgICAgY29uc3QgbG9naW5EYXRhID0gd3guZ2V0U3RvcmFnZVN5bmMoXCJsb2dpbkRhdGFcIik7XHJcbiAgICAgIGNvbnN0IGF1dGhUb2tlbiA9IGxvZ2luRGF0YVxyXG4gICAgICAgID8gbG9naW5EYXRhW1widW5pb25JZFwiXVxyXG4gICAgICAgIDogd3guZ2V0U3RvcmFnZVN5bmMoXCJ1bmlvbklkXCIpO1xyXG4gICAgICBfdGhpcy5oZWFkZXIuQXV0aG9yaXphdGlvbiA9IGF1dGhUb2tlbiB8fCBfdGhpcy5oZWFkZXIuQXV0aG9yaXphdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+IHtcclxuICAgICAgd3gucmVxdWVzdCh7XHJcbiAgICAgICAgaGVhZGVyOiBfdGhpcy5oZWFkZXIsXHJcbiAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICB1cmw6IF90aGlzLndpdGhCYXNlVVJMID8gX3RoaXMuYmFzZVVSTCArIHVybCA6IHVybCxcclxuICAgICAgICBtZXRob2Q6IG1ldGhvZCB8fCBcIkdFVFwiLFxyXG4gICAgICAgIHN1Y2Nlc3MocmVzOiBodHRwUmVzcG9uc2UpIHtcclxuICAgICAgICAgIF90aGlzLmhhbmRsZVJlcyhyZXMsIF90aGlzLCByZXNvbHZlLCByZWplY3QpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmFpbChlKSB7XHJcbiAgICAgICAgICB3eC5zaG93VG9hc3Qoe1xyXG4gICAgICAgICAgICB0aXRsZTogYOaOpeWPo+iwg+eUqOWksei0pToke2UuZXJyTXNnfWAsXHJcbiAgICAgICAgICAgIGljb246IFwibm9uZVwiXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbXBsZXRlKCkge1xyXG4gICAgICAgICAgc2hvd0xvYWRpbmcgPyB3eC5oaWRlTG9hZGluZygpIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVSZXMocmVzOiBodHRwUmVzcG9uc2UsIHRoYXQ6IGFueSwgcmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkge1xyXG4gICAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlcy5zdGF0dXNDb2RlO1xyXG4gICAgY29uc3QgcmVzRGF0YSA9IDxyZXNEYXRhPnJlcy5kYXRhO1xyXG4gICAgaWYgKHN0YXR1c0NvZGUgPj0gMjAwICYmIHN0YXR1c0NvZGUgPCAzMDApIHtcclxuICAgICAgaWYgKCF0aGF0Lmp1ZGdlRXJyQ29kZShyZXNEYXRhLmVyckNvZGUsIHJlamVjdCkpIHtcclxuICAgICAgICByZXNvbHZlKHJlc0RhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGF0Lmp1ZGdlU3RhdHVzQ29kZShyZXMuc3RhdHVzQ29kZSwgcmVqZWN0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGp1ZGdlRXJyQ29kZShlcnJDb2RlOiBudW1iZXIsIHJlamVjdDogYW55KSB7XHJcbiAgICBsZXQgaGludDtcclxuICAgIHN3aXRjaCAoZXJyQ29kZSkge1xyXG4gICAgICBjYXNlIDA6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgaGludCA9IFwi5pyq55+l6ZSZ6K+v77yBXCI7XHJcbiAgICB9XHJcbiAgICBpZiAoaGludCkge1xyXG4gICAgICB3eC5zaG93VG9hc3Qoe1xyXG4gICAgICAgIHRpdGxlOiBoaW50LFxyXG4gICAgICAgIGljb246IFwibm9uZVwiXHJcbiAgICAgIH0pO1xyXG4gICAgICByZWplY3QoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBoaW50XHJcbiAgfVxyXG5cclxuICBqdWRnZVN0YXR1c0NvZGUoc3RhdHVzQ29kZTogbnVtYmVyLCByZWplY3Q6IGFueSkge1xyXG4gICAgbGV0IGhpbnQ7XHJcbiAgICBzd2l0Y2ggKHN0YXR1c0NvZGUpIHtcclxuICAgICAgY2FzZSA0MDQ6XHJcbiAgICAgICAgaGludCA9IFwi5pyN5Yqh5Zmo5q2j5Zyo5Y2H57qnLi4uXCI7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgaGludCA9IGDmnI3liqHlmajmraPlnKjnu7TmiqTkuK3vvIzor7fnqI3lkI7lho3or5XvvIEg54q25oCB56CB77yaJHtzdGF0dXNDb2RlfWA7XHJcbiAgICB9XHJcbiAgICBpZiAoaGludCkge1xyXG4gICAgICB3eC5zaG93VG9hc3Qoe1xyXG4gICAgICAgIHRpdGxlOiBoaW50LFxyXG4gICAgICAgIGljb246IFwibm9uZVwiXHJcbiAgICAgIH0pO1xyXG4gICAgICByZWplY3QoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGZldGNoQXBpID0gbmV3IEFwaUZldGNoKHtcclxuICBiYXNlVVJMOiBhcGlDb25maWcuYmFzZVVybCxcclxuICB3aXRoQmFzZVVSTDogdHJ1ZSxcclxuICBoZWFkZXI6IHtcclxuICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgQXV0aG9yaXphdGlvbjogZGVmYXVsdEF1dGhcclxuICB9XHJcbn0pO1xyXG5cclxuZXhwb3J0IHsgZmV0Y2hBcGkgfTtcclxuIl19