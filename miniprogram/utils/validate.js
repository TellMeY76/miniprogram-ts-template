"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const validators = {
    required: {
        rule: /.+/,
        msg: "此项不能为空！"
    },
    phone: {
        rule: /^1(3|4|5|7|8)\d{9}$/,
        msg: "手机号格式不正确！"
    },
    code: {
        rule: /^\d{4}$/,
        msg: "验证码格式不正确！"
    }
};
const validate = (formFld, that) => {
    if (formFld.name) {
        const validateForm = that.data.validateForm || {};
        const name = formFld.name;
        const value = (formFld.val || "").trim();
        const validator = formFld.validator ? formFld.validator.split(",") : [];
        for (let i = 0; i < validator.length; i++) {
            const ruleName = validator[i].split("=")[0];
            const rule = validators[ruleName].rule || /.*/;
            validateForm[name] = rule.test(value) ? "" : validators[ruleName].msg;
            if (validateForm[name])
                break;
        }
        setValidateForm(validateForm, that);
    }
    else {
        console.error("表单字段名缺失");
    }
};
exports.validate = validate;
const validateRequired = (prop, that) => {
    const validateForm = that.data.validateForm;
    prop.forEach(item => {
        if (!validators.required.rule.test(that.data.form[item]["val"] || "")) {
            validateForm[item] = validators.required.msg;
        }
    });
    setValidateForm(validateForm, that);
};
exports.validateRequired = validateRequired;
const setValidateForm = (validateForm, that) => {
    validateForm["dirty"] = true;
    validateForm["invalidMsg"] = "";
    for (let fld in validateForm) {
        if (fld !== "invalidMsg" && fld !== "dirty") {
            validateForm["invalidMsg"] = validateForm[fld].trim()
                ? validateForm[fld]
                : validateForm["invalidMsg"];
        }
    }
    that.setData({
        validateForm
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2YWxpZGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQXFCQSxNQUFNLFVBQVUsR0FBYztJQUM1QixRQUFRLEVBQUU7UUFDUixJQUFJLEVBQUUsSUFBSTtRQUNWLEdBQUcsRUFBRSxTQUFTO0tBQ2Y7SUFDRCxLQUFLLEVBQUU7UUFDTCxJQUFJLEVBQUUscUJBQXFCO1FBQzNCLEdBQUcsRUFBRSxXQUFXO0tBQ2pCO0lBQ0QsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLFNBQVM7UUFDZixHQUFHLEVBQUUsV0FBVztLQUNqQjtDQUNGLENBQUM7QUFHRixNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQWdCLEVBQUUsSUFBUyxFQUFFLEVBQUU7SUFDL0MsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1FBQ2hCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQztRQUNsRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzFCLE1BQU0sS0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3hFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUMsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7WUFDL0MsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUN0RSxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUM7Z0JBQUUsTUFBTTtTQUMvQjtRQUNELGVBQWUsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDckM7U0FBTTtRQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDMUI7QUFDSCxDQUFDLENBQUM7QUE0Qk8sNEJBQVE7QUF6QmpCLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxJQUFjLEVBQUUsSUFBUyxFQUFFLEVBQUU7SUFDckQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNsQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFO1lBQ3JFLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztTQUM5QztJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsZUFBZSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFpQmlCLDRDQUFnQjtBQWZuQyxNQUFNLGVBQWUsR0FBRyxDQUFDLFlBQTBCLEVBQUUsSUFBUyxFQUFFLEVBQUU7SUFDaEUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQztJQUM3QixZQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLEtBQUssSUFBSSxHQUFHLElBQUksWUFBWSxFQUFFO1FBQzVCLElBQUksR0FBRyxLQUFLLFlBQVksSUFBSSxHQUFHLEtBQUssT0FBTyxFQUFFO1lBQzNDLFlBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFO2dCQUNuRCxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQztnQkFDbkIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNoQztLQUNGO0lBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNYLFlBQVk7S0FDYixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgUmVnT2JqIHtcclxuICBydWxlOiBSZWdFeHA7XHJcbiAgbXNnOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBWYWxpZGF0b3Ige1xyXG4gIFtrZXk6IHN0cmluZ106IFJlZ09iajtcclxufVxyXG5cclxuaW50ZXJmYWNlIEZvcm1GbGQge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB2YWw6IHN0cmluZztcclxuICB2YWxpZGF0b3I6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIFZhbGlkYXRlRm9ybSB7XHJcbiAgZGlydHk6IGJvb2xlYW47XHJcbiAgaW52YWxpZE1zZzogc3RyaW5nO1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuY29uc3QgdmFsaWRhdG9yczogVmFsaWRhdG9yID0ge1xyXG4gIHJlcXVpcmVkOiB7XHJcbiAgICBydWxlOiAvLisvLFxyXG4gICAgbXNnOiBcIuatpOmhueS4jeiDveS4uuepuu+8gVwiXHJcbiAgfSxcclxuICBwaG9uZToge1xyXG4gICAgcnVsZTogL14xKDN8NHw1fDd8OClcXGR7OX0kLyxcclxuICAgIG1zZzogXCLmiYvmnLrlj7fmoLzlvI/kuI3mraPnoa7vvIFcIlxyXG4gIH0sXHJcbiAgY29kZToge1xyXG4gICAgcnVsZTogL15cXGR7NH0kLyxcclxuICAgIG1zZzogXCLpqozor4HnoIHmoLzlvI/kuI3mraPnoa7vvIFcIlxyXG4gIH1cclxufTtcclxuXHJcbi8vIOihqOWNleWtl+auteagoemqjFxyXG5jb25zdCB2YWxpZGF0ZSA9IChmb3JtRmxkOiBGb3JtRmxkLCB0aGF0OiBhbnkpID0+IHtcclxuICBpZiAoZm9ybUZsZC5uYW1lKSB7XHJcbiAgICBjb25zdCB2YWxpZGF0ZUZvcm0gPSB0aGF0LmRhdGEudmFsaWRhdGVGb3JtIHx8IHt9O1xyXG4gICAgY29uc3QgbmFtZSA9IGZvcm1GbGQubmFtZTtcclxuICAgIGNvbnN0IHZhbHVlID0gKGZvcm1GbGQudmFsIHx8IFwiXCIpLnRyaW0oKTtcclxuICAgIGNvbnN0IHZhbGlkYXRvciA9IGZvcm1GbGQudmFsaWRhdG9yID8gZm9ybUZsZC52YWxpZGF0b3Iuc3BsaXQoXCIsXCIpIDogW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbGlkYXRvci5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBydWxlTmFtZSA9IHZhbGlkYXRvcltpXS5zcGxpdChcIj1cIilbMF07XHJcbiAgICAgIGNvbnN0IHJ1bGUgPSB2YWxpZGF0b3JzW3J1bGVOYW1lXS5ydWxlIHx8IC8uKi87XHJcbiAgICAgIHZhbGlkYXRlRm9ybVtuYW1lXSA9IHJ1bGUudGVzdCh2YWx1ZSkgPyBcIlwiIDogdmFsaWRhdG9yc1tydWxlTmFtZV0ubXNnO1xyXG4gICAgICBpZiAodmFsaWRhdGVGb3JtW25hbWVdKSBicmVhaztcclxuICAgIH1cclxuICAgIHNldFZhbGlkYXRlRm9ybSh2YWxpZGF0ZUZvcm0sIHRoYXQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwi6KGo5Y2V5a2X5q615ZCN57y65aSxXCIpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIOihqOWNleW/heWhq+mhueagoemqjFxyXG5jb25zdCB2YWxpZGF0ZVJlcXVpcmVkID0gKHByb3A6IHN0cmluZ1tdLCB0aGF0OiBhbnkpID0+IHtcclxuICBjb25zdCB2YWxpZGF0ZUZvcm0gPSB0aGF0LmRhdGEudmFsaWRhdGVGb3JtO1xyXG4gIHByb3AuZm9yRWFjaChpdGVtID0+IHtcclxuICAgIGlmICghdmFsaWRhdG9ycy5yZXF1aXJlZC5ydWxlLnRlc3QodGhhdC5kYXRhLmZvcm1baXRlbV1bXCJ2YWxcIl0gfHwgXCJcIikpIHtcclxuICAgICAgdmFsaWRhdGVGb3JtW2l0ZW1dID0gdmFsaWRhdG9ycy5yZXF1aXJlZC5tc2c7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgc2V0VmFsaWRhdGVGb3JtKHZhbGlkYXRlRm9ybSwgdGhhdCk7XHJcbn07XHJcblxyXG5jb25zdCBzZXRWYWxpZGF0ZUZvcm0gPSAodmFsaWRhdGVGb3JtOiBWYWxpZGF0ZUZvcm0sIHRoYXQ6IGFueSkgPT4ge1xyXG4gIHZhbGlkYXRlRm9ybVtcImRpcnR5XCJdID0gdHJ1ZTtcclxuICB2YWxpZGF0ZUZvcm1bXCJpbnZhbGlkTXNnXCJdID0gXCJcIjtcclxuICBmb3IgKGxldCBmbGQgaW4gdmFsaWRhdGVGb3JtKSB7XHJcbiAgICBpZiAoZmxkICE9PSBcImludmFsaWRNc2dcIiAmJiBmbGQgIT09IFwiZGlydHlcIikge1xyXG4gICAgICB2YWxpZGF0ZUZvcm1bXCJpbnZhbGlkTXNnXCJdID0gdmFsaWRhdGVGb3JtW2ZsZF0udHJpbSgpXHJcbiAgICAgICAgPyB2YWxpZGF0ZUZvcm1bZmxkXVxyXG4gICAgICAgIDogdmFsaWRhdGVGb3JtW1wiaW52YWxpZE1zZ1wiXTtcclxuICAgIH1cclxuICB9XHJcbiAgdGhhdC5zZXREYXRhKHtcclxuICAgIHZhbGlkYXRlRm9ybVxyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IHsgdmFsaWRhdGUsIHZhbGlkYXRlUmVxdWlyZWQgfTtcclxuIl19